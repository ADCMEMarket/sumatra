"""

"""

try:
    import unittest2 as unittest
except ImportError:
    import unittest

import sys
import os
from textwrap import dedent
from sumatra.publishing import utils
from sumatra.publishing.latex import includefigure
from sumatra.publishing.sphinxext import sumatra_rst
import sumatra.recordstore
from sumatra.datastore import DataKey
from StringIO import StringIO
from docutils.core import publish_string


class MockRecordStore(object):
    
    def __init__(self, store_location):
        pass
    
    def get(self, project_name, label):
        return MockRecord(label)


class MockRecord(object):
    
    def __init__(self, label):
        self.label = label
        key = DataKey("bar.jpg", "0123456789abcdef")
        key.url = "bar.jpg"
        self.output_data = [key]


class patch(object):
    
    def __init__(self, module, obj_name, mock_obj):
        self.module = module
        self.obj_name = obj_name
        self.mock_obj = mock_obj
        self.orig_obj = getattr(module, obj_name)
        
    def __call__(self, f):
        def wrapped_f(*args, **kwargs):
            setattr(self.module, self.obj_name, self.mock_obj)
            f(*args, **kwargs)
            setattr(self.module, self.obj_name, self.orig_obj)
        wrapped_f.__name__ = f.__name__
        return wrapped_f


class TestLaTeX(unittest.TestCase):
    
    def test_read_config(self):
        config = dedent("""
            [sumatra]
            label: foo
            project: MyProject
            record_store: /path/to/db
            digest: 0123456789abcdef
            [graphics]
            width: 0.9\textwidth
            """)
        test_file = "test_latex.config"
        with open(test_file, "w") as fp:
            fp.write(config)
        self.assertEqual(includefigure.read_config(test_file),
                         ({"label": "foo",
                           "project": "MyProject",
                           "record_store": "/path/to/db",
                           "digest": "0123456789abcdef"},
                          {"width": "0.9\textwidth"}))
        os.remove(test_file)
    
    @patch(includefigure, 'download_to_local_directory', lambda x: x)
    @patch(utils, 'get_record_store', MockRecordStore)    
    def test_generate_latex_command(self):
        sumatra_options = {
            "label": "foo",
            "project": "MyProject",
            "record_store": "/path/to/db",
        }
        graphics_options = {
            "width": "\textwidth",
        }
        sys.stdout = StringIO()
        cmd = includefigure.generate_latex_command(sumatra_options, graphics_options)
        sys.stdout.seek(0)
        self.assertEqual(sys.stdout.read().strip(),
                         "\includegraphics[width=\textwidth]{bar.jpg}")
        sys.stdout = sys.__stdout__


class TestSphinx(unittest.TestCase):
    """
    [general]
    sumatra_record_store: https://smt.andrewdavison.info/records
    sumatra_project: Destexhe_JCNS_2009
    sumatra_link_icon: icon_info.png
    """
    
    #def test_build_options(self):
    
    @patch(utils, 'get_record_store', MockRecordStore)
    def test_full_build(self):
        source = dedent("""
            .. smtimage:: foo
               :digest: 0123456789abcdef
            """)
        config = dedent("""
            [general]
            sumatra_record_store: /path/to/db
            sumatra_project: MyProject
            sumatra_link_icon: icon_info.png
            """)
        with open("docutils.conf", "w") as fp:
            fp.write(config)
        output = publish_string(source, writer_name='pseudoxml')
        self.assertEqual(output,
                         '<document source="<string>">\n    <image alt="Data file generated by computation foo" digest="0123456789abcdef" uri="bar.jpg">\n')
        os.remove("docutils.conf")