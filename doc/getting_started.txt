===============
Getting started
===============

Let us assume that you already have a simulation project, which you wish to start
managing using Sumatra, and that the code for this project is under version
control.

Change to the working directory for your project, and then create a new Sumatra
project in this directory using the smt init command::

    $ cd myproject
    $ smt init MyProject
    
where "MyProject" is the project name. This creates a sub-directory named .smt
and, if it doesn't already exist, a sub-directory named Data.

Sumatra tracks data files created by your simulation by searching for newly
created files within a given directory tree. By default, it assumes that your
simulation will create files in a sub-directory Data of your working directory.
You can change this by providing the --datapath option to smt init, e.g.::

    $ smt init --datapath=/data/myproject MyProject
    
Now Sumatra will look for new files within /data/myproject.


Now let's run a simulation. We will assume that your simulation code is written
in Python, and that you run the simulation by executing a file called main.py,
passing it the name of a parameter file on the command line, i.e., you would
normally run a simulation using::

    $ python main.py default.param
    
To run it using Sumatra, you would use::

    $ smt run --simulator=python --main=main.py default.param
    ...

Now we can see a list of the simulations we have run::

    $ smt list
    ...
    
This shows the label for each simulation we have run. Since we did not specify
a label, one was automatically generated from the name of the parameter file. To
see more detail, use the --mode option::

    $ smt list --mode=long
    ...
    ...
    
    
    
(most options also have a short form, "-m long" in this case.)
[since there are only three modes - short, long, table, might be better to have
--long and --table options instead of --mode]

It is a bit tedious to have to tell Sumatra which simulator and which file to
run every time. Presumably, the name of the main file changes infrequently and
the simulator almost never. Therefore, these can be set as defaults for a given
project::

    $ smt configure --simulator=python --main=main.py
    
(you could also have given these options to smt init. init is used to create
a project and configure to change its configuration later, but they mostly
accept the same arguments).

Now you can run a simulation with a much shorter command line::

    $ smt run default.param
    ...
    
To see the current configuration of your project, use the info command::

    $ smt info
    ...
    
Sumatra automatically records the identity and versions of the simulation files
and the simulator executable, stores links to any files created by the
simulation, records any error messages, the date and time at which the simulation
was run, and its duration. You may also add your own annotations, in several
different ways. On running the simulation, you can specify a label, and the reason
for which you are running the simulation::

    $ smt run --label="haggling" --reason="determine whether the gourd is worth 3 or 4 shekels" romans.param
    
After the simulation is complete, you can add a description of the outcome::

    $ smt comment "apparently, it is worth NaN shekels."
    
This adds the comment to the most recent simulation. You may also describe the outcome
of an earlier simulation, by specifying its ID (made up from the label and the
timestamp)::

    $ smt comment default_20091010 "Eureka! Nobel prize here we come."
    
You can also tag a simulation record with one or more short keywords::

    $ smt tag foobar barfoo 
    
and delete tags::

    $ smt tag --delete barfoo

The parameter file may be in any format - it is your script which is responsible
for reading it. However, if it is in one of the formats that Sumatra understands
([insert cross reference here]) then it is possible to modify parameter values
on the command line. Suppose default.param contains a parameter tau_m = 20.0, as
well as a number of other parameters, then::

    $ smt run --reason="test effect of a smaller time constant" default.param tau_m=10.0

will generate a new parameter file identical to default.param but with tau_m
equal to 10.0, and then will pass this new parameter file to your script. This
can be very convenient when you wish to study the effects of changing one or two
parameters, without having to edit your parameter file each time.

One of the main aims of Sumatra is to ensure the reproducibility of simulation
results. The repeat command re-runs a previous simulation, and checks that the
output is identical to that of the original run.

    $ smt repeat haggling_2009101002
    The simulation results match.
    
Although it is better not to delete simulation records, so as to preserve a full
record of the project, false starts and all, it is possible::

    $ smt delete default_2009101003
    
It is also possible to delete all simulations with a given label::

    $ smt delete --group default
    
or with a given tag::

    $ smt delete --tag foobar
    
Most of the commands described here have further options that we have not
described. A full description of the options for each command is given in the
[command reference]. The full list of commands is available by running just::

    $ smt

and help on a given command is available by running the command with the --help
option, e.g.::

    $ smt comment --help

This tutorial has covered using smt for serial simulations. A further tutorial
covers [using smt for parallel simulations], whether batch or distributed
(using MPI).

Also see [smtweb], which provides a more graphical interface to viewing lists
of simulations than smt list.
