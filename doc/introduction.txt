==========
Background
==========


Reproducibility, provenance and project management
--------------------------------------------------

The need for reproducibility in science, why this should be easy in
computational science, and why it is not easy.

Overlap with the concept of provenance, more usually applied to data.

More general problem of simulation project management

What needs to be recorded?
--------------------------

What needs to be recorded to ensure reproducibility:
    
* the code that was run
* any parameter files and command line options
* the platform on which the code was run

For an individual researcher trying to keep track of a research project with
many hundreds or thousands of simulations, it is also useful to record the
following:

* the reason for which the simulation was run
* a summary of the outcome of the simulation

Recording the code might mean storing a copy of the executable, or the source
code (including that of any libraries used), the compiler used (including version)
and the compilation procedure (e.g. the Makefile, etc.)
For interpreted code, it might mean recording the version of the interpreter
(and any options used in compiling it) as well as storing a copy of the
simulation script, and of any external modules or packages that are included or
imported into the script file.

For projects using version control, "storing a copy of the code" may be replaced
with "recording the URL of the repository and the revision number".

The platform includes the processor architecture(s), the operating system(s),
the number of processors (for distributed simulations), etc.


Tools for recording provenance information
------------------------------------------

The traditional way of recording the information necessary to reproduce an
experiment is by noting down all details in a paper notebook, together with
copies or print-outs of any results. More modern approaches may replace or
augment the paper notebook with a spreadsheet or other hand-rolled database, but
still with the feature that all relevant information is entered by hand.

Electronic lab notebooks and LIMS in other areas of science...


Challenges for automated recording
----------------------------------

Different ways of working, different workflows: command line, GUI, batch-jobs (e.g. in supercomputer
environment), or any combination of these for different components (simulation,
analysis,graphing, etc.) and phases of a project.

Solo or collaborative projects.

Previous or partial attempt: programmer's workbench, NeuroConstruct.
What about other areas of simulation science, or workflow tools like Taverna?

The solution we propose is to develop a core library, implemented as a Python
package, sumatra, and then to develop a series of interfaces that build on top of this:
a command-line interface, a web interface, a graphical interface. Each of these
interfaces will enable:

* launching simulations with automated recording of provenance information
* managing a simulaion project: browsing, viewing, deleting simulations

Alternatively, modellers can use the sumatra package directly in their own code,
to enable provenance recording, then simply launch simulations in their usual way.

The core sumatra package needs to:

* interact with version control systems, such as Subversion, Git, Mercurial, or
  Bazaar;
* support launching serial, distributed (via MPI) or batch simulations;
* link to data generated by the simulation, whether stored in files or databases
* support all and any simulation programs
* support both local and networked storage of simulation information
* be extensible, so that components can easily be added for new version control
  systems, etc.
* be very easy to use, otherwise it will only be used by the very conscientious