from optparse import OptionParser

from programs import get_executable, Script
from datastore import FileSystemDataStore

def setup(argv):
    """setup: set up a new simulation project."""
    usage = "%prog setup [options] NAME MAINFILE"
    description = """set up a new simulation project in the current directory.
    
      NAME is the project name.
    
      MAINFILE is the name of the simulator script that would be supplied on the
      command line if running the simulator normally, e.g. init.hoc.
    """
    parser = OptionParser(usage=usage,
                          description=description)
    parser.add_option('-d', '--datapath', metavar='PATH', default='./Data', help="set the path to the directory in which smt will search for datafiles generated by the simulation. Defaults to %default")
    parser.add_option('-s', '--simpath', metavar='PATH', help="set the path to the simulator executable. If this is not set, smt will try to infer the executable from MAINFILE, and will try to find the executable from the PATH environment variable, then by searching various likelylocations on the filesystem.")
    parser.add_option('-r', '--repository', help="the URL of a Subversion or Mercurial repository containing the simulation code. This will be checked out/cloned into the current directory.")
    parser.add_option('-D', '--debug', action='store_true', help="print debugging information")
    (options, args) = parser.parse_args(argv)
    project_name, main_file = args
    
    global _debug
    _debug = options.debug
    
    script_code = Script(main_file=main_file, repository_url=options.repository)
    script_code.checkout() # worth doing now, to find any errors early
    executable = get_executable(path=options.simpath, example_script=main_file)
    
    project = SimProject(name=project_name,
                         default_executable=executable,
                         default_script=script_code,
                         default_launch_mode=SerialLaunchMode(),
                         data_store=FileSystemDataStore(options.datapath))
    