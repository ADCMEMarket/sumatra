from optparse import OptionParser
from textwrap import dedent

from programs import get_executable, Script
from datastore import FileSystemDataStore
from projects import SimProject, load_simulation_project
from launch import SerialLaunchMode
from parameters import build_parameters

def setup(argv):
    """Set up a new simulation project in the current directory."""
    usage = "%prog setup [options] NAME MAINFILE"
    description = dedent("""\
      Set up a new simulation project in the current directory.

      NAME is the project name.

      MAINFILE is the name of the simulator script that would be supplied on the
      command line if running the simulator normally, e.g. init.hoc.
    """)
    parser = OptionParser(usage=usage,
                          description=description)
    parser.add_option('-d', '--datapath', metavar='PATH', default='./Data', help="set the path to the directory in which smt will search for datafiles generated by the simulation. Defaults to %default")
    parser.add_option('-s', '--simpath', metavar='PATH', help="set the path to the simulator executable. If this is not set, smt will try to infer the executable from MAINFILE, and will try to find the executable from the PATH environment variable, then by searching various likely locations on the filesystem.")
    parser.add_option('-r', '--repository', help="the URL of a Subversion or Mercurial repository containing the simulation code. This will be checked out/cloned into the current directory.")
    parser.add_option('-D', '--debug', action='store_true', help="print debugging information")
    (options, args) = parser.parse_args(argv)
    if len(args) != 2:
        parser.error('Both NAME and MAINFILE must be specified.')
    project_name, main_file = args
    
    global _debug
    _debug = options.debug
    
    script_code = Script(main_file=main_file, repository_url=options.repository)
    script_code.checkout() # worth doing now, to find any errors early
    executable = get_executable(path=options.simpath, script_file=main_file)
    
    project = SimProject(name=project_name,
                         default_executable=executable,
                         default_script=script_code,
                         default_launch_mode=SerialLaunchMode(),
                         data_store=FileSystemDataStore(options.datapath))
    
def info(argv):
    """Print information about the current simulation project."""
    usage = "%prog info"
    description = __doc__
    parser = OptionParser(usage=usage,
                          description=description)
    (options, args) = parser.parse_args(argv)
    if len(args) != 0:
        parser.error('info does not take any arguments')
    project = load_simulation_project()
    print project.info()
    
def run(argv):
    """Run a simulation."""
    usage = "%prog run [options] PARAMFILE [param=value, ...]"
    description = dedent("""\
      PARAMFILE is the name of the parameter file to be used for this simulation.
      For convenience, it is possible to specify a file with default parameters
      and then specify those parameters that are different from the default values
      on the command line with any number of param=value pairs (note no space
      around the equals sign). The parameter file should also consist of
      param=value pairs, one per line, although here spaces are allowed around the
      equals sign. Comments may be included using #.""")
    parser = OptionParser(usage=usage,
                          description=description)
    parser.add_option('-v', '--version', metavar='REV',
                      help="use version REV of the simulation code (if this is not the same as the working copy, it will be checked out of the repository). If this option is not specified, the most recent version in the repository will be used. If there are changes in the working copy, the user will be prompted to commit them first")
    parser.add_option('-l', '--label', help="specify a label for the simulation. This label will have a time stamp appended, and will then be used to label the archive of data files that is generated by this run. If no label is specified, the label will be based on PARAMFILE.")
    parser.add_option('-r', '--reason', help="explain the reason for running this simulation.")
    
    (options, args) = parser.parse_args(argv)
    if len(args) < 1:
        parser.error('A parameter file must be specified.')
        
    parameter_file = args[0]
    cmdline_parameters = args[1:]
    parameters = build_parameters(parameter_file, cmdline_parameters)
    print parameters.pretty(expand_urls=True)
    
    project = load_simulation_project()
    label = options.label or parameter_file
    project.launch_simulation(parameters, label=label, reason=options.reason)
    